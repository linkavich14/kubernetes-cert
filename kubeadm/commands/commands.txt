Create a new cluster with kubeadm

-- To load the kernel module (in all nodes)
sudo modprobe br_netfilter

-- IpTables see bridged traffic (in all nodes)

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system


-- Install docker (in all nodes)

sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
>   "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
>   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get install docker-ce docker-ce-cli containerd.io


cat <<EOF | sudo tee /etc/docker/daemon.json
> {
>   "exec-opts": ["native.cgroupdriver=systemd"],
>   "log-driver": "json-file",
>   "log-opts": {
>     "max-size": "100m"
>   },
>   "storage-driver": "overlay2"
> }
> EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}

sudo systemctl enable docker

sudo systemctl daemon-reload

sudo systemctl restart docker

sudo apt-get install -y apt-transport-https ca-certificates curl


-- Install kubectl
sudo apt-get install -y kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl

 mkdir -p $HOME/.kube

 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

 sudo chown $(id -u):$(id -g) $HOME/.kube/config


-- Install kubeadm

kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.56.2


-- Clean up control plane

kubeadm reset

-- Install Weave net

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"




# To get a new token to join the node to the control plane
kubeadm token create --print-join-command

# Switch namespace
kubectl config set-context --current --namespace=<name>

TroubleShooting

kubectl -n <namespace> get all
kubectl get svc mysql -o yaml > mysql-service.yaml


kubectl -n <namespace> get ep

kubectl -n gamma expose pod mysql --name=mysql-service


Plane Control TroubleShooting

kubectl logs kube-apiserver-master -n kube-system

systemctl status kubelet

Scheduler manifests

/etc/kubernetes/manifests

kubectl scale deployment app --replicas=2


JSON Path

kubectl get nodes -o=jsonpath='{$.items[*]metadata.name}{"\n"}{$.items[*].status.capacity.cpu}'

Loop

'{range $.items[*]metadata.name}{"\n"}{$.items[*].status.capacity.cpu}{"\n"}{end}'


Deploy pod from kubectl

kubectl run nginx-pod --image=nginx:alpine

kubectl run messaging --image=redis:alpine -l  tier=msg
To validate
kubectl get pods --show-labels

Create a namespace
kubectl create ns apx-x9984574


Get all nodes json
kubectl get nodes -o=json
 kubectl get nodes -o=json > /opt/outputs/nodes-z3444kd9.json

Create service
kubectl expose pod messaging --name messaging-service --port 6379 --target-port 6379

Create a deployment
kubectl create deployment  hr-web-app --image=kodekloud/webapp-color
Scale to 2 replicas
kubectl scale deployment hr-web-app --replicas=2


kubectl run static-busybox --image=busybox --comand sleep 1000 --dry-run=client -o yaml > static-busybox.yaml

